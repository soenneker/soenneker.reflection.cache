using System.Reflection;

namespace Soenneker.Reflection.Cache.Properties.Abstract;

public interface ICachedProperty
{
    /// <summary>
    /// Gets the <see cref="PropertyInfo"/> associated with this cached property.
    /// </summary>
    PropertyInfo PropertyInfo { get; }

    /// <summary>
    /// Gets a value indicating whether the property's type is a delegate.
    /// </summary>
    bool IsDelegate { get; }

    /// <summary>
    /// Gets a value indicating whether the property is the equality contract (internal property used by records).
    /// </summary>
    bool IsEqualityContract { get; }

    /// <summary>
    /// Gets a value indicating whether the property is static.
    /// </summary>
    bool IsStatic { get; }

    /// <summary>
    /// Gets a value indicating whether the property is virtual and can be overridden.
    /// </summary>
    bool IsVirtual { get; }

    /// <summary>
    /// Gets a value indicating whether the property is an indexer.
    /// </summary>
    bool IsIndexer { get; }

    /// <summary>
    /// Gets a value indicating whether the property is generated by the compiler.
    /// </summary>
    bool IsCompilerGenerated { get; }

    /// <summary>
    /// Gets a value indicating whether the property is read-only, meaning it has a getter but no setter.
    /// </summary>
    bool IsReadOnly { get; }

    /// <summary>
    /// Gets a value indicating whether the property has a public getter.
    /// </summary>
    bool IsPublic { get; }

    /// <summary>
    /// Gets a value indicating whether the property has a protected getter or setter.
    /// </summary>
    bool IsProtected { get; }

    /// <summary>
    /// Gets a value indicating whether the property has both private getter and setter.
    /// </summary>
    bool IsPrivate { get; }
}